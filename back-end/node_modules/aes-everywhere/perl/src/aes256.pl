#!/usr/bin/perl

package Person;

use strict;
use warnings;
use Carp;

sub new {
    my $class = shift;
    my $self  = { @_ };
    croak "bad arguments" unless defined $self->{firstname} and defined $self->{lastname};
    return bless $self, $class; #this is what makes a reference into an object
}

sub name {
    my $self = shift;
    return "$self->{firstname} $self->{lastname}";
}

#and here is some code that uses it
package main;

use Crypt::CBC;
#use Crypt::Cipher::AES;
#use MIME::Base64 qw(decode_base64);

use strict;

#my $key = decode_base64('OhjsqEflVL1GNteBIgpD1ngMvS3vVicAkfTyerJjr/c=');
#my $iv = "1234567812345678";
#
#$iv = undef;
#
#my $cbc = Crypt::CBC->new( -cipher=>'Cipher::AES', -key=>$key, -iv=>$iv );
#my $plaintext = $cbc->decrypt(decode_base64('sR9aVLpjHgpbM7Kw8hb7Ig=='));
#print "$plaintext\n";
#
#my $person = Person->new(firstname => "Chas.", lastname => "Owens");
#print $person->name, "\n";
#
#use Crypt::CBC;

#my $cipher = Crypt::CBC->new( -key    => 'my secret key',
#    -cipher => 'Blowfish'
#);

##########################

#my $ciphertext = $cipher->encrypt("This data is hush hush");
#my $plaintext  = $cipher->decrypt($ciphertext);

#$cipher->start('encrypting');
#open(F,"./BIG_FILE");
#while (read(F,$buffer,1024)) {
#    print $cipher->crypt($buffer);
#}
#print $cipher->finish;

# do-it-yourself mode -- specify key, initialization vector yourself
#my $key    = Crypt::CBC->random_bytes(32);  # assuming a 8-byte block cipher
#my $iv     = Crypt::CBC->random_bytes(16);
#my $cipher = Crypt::CBC->new(
#    -cipher      => 'Rijndael',
#    -literal_key => 1,
#    -key         => $key,
#    -iv          => $iv,
#    -header      => 'none');
#
#my $ciphertext = $cipher->encrypt("This data is hush hush");
#my $plaintext  = $cipher->decrypt($ciphertext);
#
## RANDOMIV-compatible mode
#$cipher = Crypt::CBC->new(-key         => 'Super Secret!',
#-header      => 'randomiv');

use Crypt::Rijndael;

# keysize() is 32, but 24 and 16 are also possible
# blocksize() is 16

my $cipher = Crypt::Rijndael->new( "a" x 32, Crypt::Rijndael::MODE_CBC() );

my $plaintext = 'text';
my $iv     = Crypt::CBC->random_bytes(16);

$cipher->set_iv($iv);
my $crypted = $cipher->encrypt($plaintext);
# - OR -
#my $plaintext = $cipher->decrypt($crypted);


